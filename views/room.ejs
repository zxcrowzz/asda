<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WebSocket Video Chat</title>
    <style>
        #video-grid {
            display: flex;
            flex-wrap: wrap;
        }
        video {
            width: 300px;
            margin: 10px;
        }
    </style>
</head>
<body>
    <h1>WebSocket Video Chat</h1>
    <div id="video-grid"></div>
    <button onclick="startVideo()">Start Video</button>

    <script>
         const WS_PORT = 8080; // Make sure this matches the port in your server code
         const socket = new WebSocket("wss://r3dxx-9ce6f110c87b.herokuapp.com")
        const videoGrid = document.getElementById('video-grid');
        let localStream;
        let peerConnections = {};

        socket.onopen = () => {
            console.log('Connected to WebSocket server');
        };

        socket.onmessage = (event) => {
            const data = JSON.parse(event.data);
            switch (data.type) {
                case 'video-offer':
                    handleVideoOffer(data);
                    break;
                case 'ice-candidate':
                    handleIceCandidate(data.candidate, data.id);
                    break;
                case 'video-answer':
                    handleVideoAnswer(data.sdp, data.id);
                    break;
                case 'user-connected':
                    console.log(`User connected: ${data.id}`);
                    break;
            }
        };

        async function startVideo() {
            try {
                localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
                const videoElement = document.createElement('video');
                videoElement.srcObject = localStream;
                videoElement.muted = true;
                videoElement.play();
                videoGrid.appendChild(videoElement);
                sendVideoStream();
            } catch (error) {
                console.error('Error accessing media devices: ', error);
                alert('Unable to access the camera. Please check your device settings.');
            }
        }

        function sendVideoStream() {
            const peerConnection = new RTCPeerConnection();
            localStream.getTracks().forEach(track => {
                peerConnection.addTrack(track, localStream);
            });

            peerConnection.onicecandidate = (event) => {
                if (event.candidate) {
                    socket.send(JSON.stringify({
                        type: 'ice-candidate',
                        candidate: event.candidate,
                        id: socket.id
                    }));
                }
            };

            peerConnection.ontrack = (event) => {
                const remoteVideo = document.createElement('video');
                remoteVideo.srcObject = event.streams[0];
                remoteVideo.autoplay = true;
                remoteVideo.playsInline = true;
                videoGrid.appendChild(remoteVideo);
            };

            peerConnection.createOffer().then(offer => {
                return peerConnection.setLocalDescription(offer);
            }).then(() => {
                socket.send(JSON.stringify({
                    type: 'video-offer',
                    sdp: peerConnection.localDescription,
                    id: socket.id
                }));
            }).catch(error => {
                console.error('Error creating offer:', error);
            });

            peerConnections[socket.id] = peerConnection;
        }

        function handleVideoOffer(data) {
            const peerConnection = new RTCPeerConnection();
            peerConnections[data.id] = peerConnection;

            peerConnection.setRemoteDescription(new RTCSessionDescription(data.sdp))
                .then(() => {
                    localStream.getTracks().forEach(track => {
                        peerConnection.addTrack(track, localStream);
                    });

                    return peerConnection.createAnswer();
                })
                .then(answer => {
                    return peerConnection.setLocalDescription(answer);
                })
                .then(() => {
                    socket.send(JSON.stringify({
                        type: 'video-answer',
                        sdp: peerConnection.localDescription,
                        id: data.id
                    }));
                })
                .catch(error => {
                    console.error('Error handling video offer:', error);
                });

            peerConnection.onicecandidate = (event) => {
                if (event.candidate) {
                    socket.send(JSON.stringify({
                        type: 'ice-candidate',
                        candidate: event.candidate,
                        id: data.id
                    }));
                }
            };

            peerConnection.ontrack = (event) => {
                const remoteVideo = document.createElement('video');
                remoteVideo.srcObject = event.streams[0];
                remoteVideo.autoplay = true;
                remoteVideo.playsInline = true;
                videoGrid.appendChild(remoteVideo);
            };
        }

        function handleIceCandidate(candidate, id) {
            const peerConnection = peerConnections[id];
            if (peerConnection) {
                peerConnection.addIceCandidate(new RTCIceCandidate(candidate))
                    .catch(error => {
                        console.error('Error adding received ICE candidate:', error);
                    });
            } else {
                console.error(`No peer connection found for ID: ${id}`);
            }
        }

        function handleVideoAnswer(sdp, id) {
            const peerConnection = peerConnections[id];
            if (peerConnection) {
                peerConnection.setRemoteDescription(new RTCSessionDescription(sdp))
                    .catch(error => {
                        console.error('Error setting remote description for video answer:', error);
                    });
            } else {
                console.error(`No peer connection found for ID: ${id}`);
            }
        }
    </script>
</body>
</html>
